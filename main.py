from aiogram import Bot, Dispatcher, types, executor
from dotenv import load_dotenv
import openai
import os

load_dotenv()

BOT_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_KEY")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
openai.api_key = OPENAI_API_KEY

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø FullStackFriendBot. –ù–∞–ø–∏—à–∏, —â–æ —Ç–µ–±–µ —Ü—ñ–∫–∞–≤–∏—Ç—å –≤ –Ü–¢, —ñ —è –ø—ñ–¥–∫–∞–∂—É, –∑ —á–æ–≥–æ –ø–æ—á–∞—Ç–∏!")

@dp.message_handler()
async def recommend(message: types.Message):
    prompt = f"–°—Ç—É–¥–µ–Ω—Ç –∑–∞–ø–∏—Ç—É—î: {message.text}. –î–∞–π –∫–æ—Ä–æ—Ç–∫—É –Ω–∞–≤—á–∞–ª—å–Ω—É –ø–æ—Ä–∞–¥—É —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é."
    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢–∏ –æ—Å–≤—ñ—Ç–Ω—ñ–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è –Ü–¢-—Å—Ç—É–¥–µ–Ω—Ç—ñ–≤."},
                {"role": "user", "content": prompt}
            ]
        )
        await message.answer(response['choices'][0]['message']['content'])
    except Exception as e:
        await message.answer("‚ö†Ô∏è –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
        print(e)

if __name__ == '__main__':
    executor.start_polling(dp)
